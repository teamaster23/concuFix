1:

{'this.now': [['112:     private int now;'], ['113:     private MyLinkedList waitList;'], ['114:     private int max;'], ['118:     /**', '119:      * Class constructor', '120:      * Creates an empty list that will keep specific notification locks.', '121:      * Each notification lock will have a key field called time, which will', '122:      * be equal to the wakeup time of the thread.', '123:      */'], ['130:     /**', '131:      * Increments the time by one.', '132:      * If the list of notification locks is not empty and the head of the', '133:      * list needs to be awaken, removes the head of the', '134:      * list and notifies everyone sleeping on that lock.', '135:      */'], ['201:     /**', '202:      * Gets the current time of the clock.', '203:      */']], 'this.waitList.size': [['112:     private int now;'], ['113:     private MyLinkedList waitList;'], ['114:     private int max;'], ['118:     /**', '119:      * Class constructor', '120:      * Creates an empty list that will keep specific notification locks.', '121:      * Each notification lock will have a key field called time, which will', '122:      * be equal to the wakeup time of the thread.', '123:      */'], ['130:     /**', '131:      * Increments the time by one.', '132:      * If the list of notification locks is not empty and the head of the', '133:      * list needs to be awaken, removes the head of the', '134:      * list and notifies everyone sleeping on that lock.', '135:      */'], ['201:     /**', '202:      * Gets the current time of the clock.', '203:      */']], 'this.waitList.list': [['112:     private int now;'], ['113:     private MyLinkedList waitList;'], ['114:     private int max;'], ['118:     /**', '119:      * Class constructor', '120:      * Creates an empty list that will keep specific notification locks.', '121:      * Each notification lock will have a key field called time, which will', '122:      * be equal to the wakeup time of the thread.', '123:      */'], ['130:     /**', '131:      * Increments the time by one.', '132:      * If the list of notification locks is not empty and the head of the', '133:      * list needs to be awaken, removes the head of the', '134:      * list and notifies everyone sleeping on that lock.', '135:      */'], ['201:     /**', '202:      * Gets the current time of the clock.', '203:      */']]}

[['int getTime() {', 'return now;', '}'], ['//..', 'now++;', '//..', 'if (first.time() == now) {', '//..']]

2:

{'this.now': [['112:     private int now;'], ['113:     private MyLinkedList waitList;'], ['114:     private int max;'], ['118:     /**', '119:      * Class constructor', '120:      * Creates an empty list that will keep specific notification locks.', '121:      * Each notification lock will have a key field called time, which will', '122:      * be equal to the wakeup time of the thread.', '123:      */'], ['130:     /**', '131:      * Increments the time by one.', '132:      * If the list of notification locks is not empty and the head of the', '133:      * list needs to be awaken, removes the head of the', '134:      * list and notifies everyone sleeping on that lock.', '135:      */'], ['201:     /**', '202:      * Gets the current time of the clock.', '203:      */']], 'this.waitList.size': [['112:     private int now;'], ['113:     private MyLinkedList waitList;'], ['114:     private int max;'], ['118:     /**', '119:      * Class constructor', '120:      * Creates an empty list that will keep specific notification locks.', '121:      * Each notification lock will have a key field called time, which will', '122:      * be equal to the wakeup time of the thread.', '123:      */'], ['130:     /**', '131:      * Increments the time by one.', '132:      * If the list of notification locks is not empty and the head of the', '133:      * list needs to be awaken, removes the head of the', '134:      * list and notifies everyone sleeping on that lock.', '135:      */'], ['201:     /**', '202:      * Gets the current time of the clock.', '203:      */']], 'this.waitList.list': [['112:     private int now;'], ['113:     private MyLinkedList waitList;'], ['114:     private int max;'], ['118:     /**', '119:      * Class constructor', '120:      * Creates an empty list that will keep specific notification locks.', '121:      * Each notification lock will have a key field called time, which will', '122:      * be equal to the wakeup time of the thread.', '123:      */'], ['130:     /**', '131:      * Increments the time by one.', '132:      * If the list of notification locks is not empty and the head of the', '133:      * list needs to be awaken, removes the head of the', '134:      * list and notifies everyone sleeping on that lock.', '135:      */'], ['201:     /**', '202:      * Gets the current time of the clock.', '203:      */']]}

[['//..'], ['//..']]

3:

{'this.now': [['112:     private int now;'], ['113:     private MyLinkedList waitList;'], ['114:     private int max;'], ['118:     /**', '119:      * Class constructor', '120:      * Creates an empty list that will keep specific notification locks.', '121:      * Each notification lock will have a key field called time, which will', '122:      * be equal to the wakeup time of the thread.', '123:      */'], ['130:     /**', '131:      * Increments the time by one.', '132:      * If the list of notification locks is not empty and the head of the', '133:      * list needs to be awaken, removes the head of the', '134:      * list and notifies everyone sleeping on that lock.', '135:      */'], ['201:     /**', '202:      * Gets the current time of the clock.', '203:      */']], 'this.waitList.size': [['112:     private int now;'], ['113:     private MyLinkedList waitList;'], ['114:     private int max;'], ['118:     /**', '119:      * Class constructor', '120:      * Creates an empty list that will keep specific notification locks.', '121:      * Each notification lock will have a key field called time, which will', '122:      * be equal to the wakeup time of the thread.', '123:      */'], ['130:     /**', '131:      * Increments the time by one.', '132:      * If the list of notification locks is not empty and the head of the', '133:      * list needs to be awaken, removes the head of the', '134:      * list and notifies everyone sleeping on that lock.', '135:      */'], ['201:     /**', '202:      * Gets the current time of the clock.', '203:      */']], 'this.waitList.list': [['112:     private int now;'], ['113:     private MyLinkedList waitList;'], ['114:     private int max;'], ['118:     /**', '119:      * Class constructor', '120:      * Creates an empty list that will keep specific notification locks.', '121:      * Each notification lock will have a key field called time, which will', '122:      * be equal to the wakeup time of the thread.', '123:      */'], ['130:     /**', '131:      * Increments the time by one.', '132:      * If the list of notification locks is not empty and the head of the', '133:      * list needs to be awaken, removes the head of the', '134:      * list and notifies everyone sleeping on that lock.', '135:      */'], ['201:     /**', '202:      * Gets the current time of the clock.', '203:      */']]}

[['//..'], ['//..', '* wake up the head of the list. If the thread wanted to sleep on the head', '* of the list or close to the head', "* of the list, it's possible to be late. If a thread wants to sleep on the lock", '//..']]
